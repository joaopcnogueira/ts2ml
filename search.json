[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nadd_missing_slots\n\n add_missing_slots (df:pandas.core.frame.DataFrame, datetime_col:str,\n                    entity_col:str, value_col:str, freq:str='H',\n                    fill_value:int=0)\n\nAdd missing slots to a time series dataframe. This function is useful to fill missing slots in a time series dataframe. For example, if a time series is associated to a location, this function will add missing slots for each location. Missing slots are filled with the value specified in the ‘fill_value’ parameter. By default, the frequency of the time series is hourly.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\nDataFrame\n\ninput dataframe with datetime, entity and value columns - time series format\n\n\ndatetime_col\nstr\n\nname of the datetime column\n\n\nentity_col\nstr\n\nname of the entity column. If a time series is associated to a location, this column will be ‘location_id’\n\n\nvalue_col\nstr\n\nname of the value column\n\n\nfreq\nstr\nH\nfrequency of the time series. Default is hourly\n\n\nfill_value\nint\n0\nvalue to use to fill missing slots\n\n\nReturns\nDataFrame\n\n\n\n\n\n\ndf = pd.DataFrame({\n    'pickup_hour': ['2022-01-01 00:00:00', '2022-01-01 01:00:00', '2022-01-01 03:00:00', '2022-01-01 01:00:00', '2022-01-01 02:00:00', '2022-01-01 05:00:00'],\n    'pickup_location_id': [1, 1, 1, 2, 2, 2],\n    'rides': [2, 3, 1, 1, 2, 1]\n})\ndf\n\n\n\n\n\n\n\n\npickup_hour\npickup_location_id\nrides\n\n\n\n\n0\n2022-01-01 00:00:00\n1\n2\n\n\n1\n2022-01-01 01:00:00\n1\n3\n\n\n2\n2022-01-01 03:00:00\n1\n1\n\n\n3\n2022-01-01 01:00:00\n2\n1\n\n\n4\n2022-01-01 02:00:00\n2\n2\n\n\n5\n2022-01-01 05:00:00\n2\n1\n\n\n\n\n\n\n\n\nadd_missing_slots(df, datetime_col='pickup_hour', entity_col='pickup_location_id', value_col='rides', freq='H')\n\n100%|██████████| 2/2 [00:00&lt;00:00, 448.83it/s]\n\n\n\n\n\n\n\n\n\npickup_hour\npickup_location_id\nrides\n\n\n\n\n0\n2022-01-01 00:00:00\n1\n2\n\n\n1\n2022-01-01 01:00:00\n1\n3\n\n\n2\n2022-01-01 02:00:00\n1\n0\n\n\n3\n2022-01-01 03:00:00\n1\n1\n\n\n4\n2022-01-01 04:00:00\n1\n0\n\n\n5\n2022-01-01 05:00:00\n1\n0\n\n\n6\n2022-01-01 00:00:00\n2\n0\n\n\n7\n2022-01-01 01:00:00\n2\n1\n\n\n8\n2022-01-01 02:00:00\n2\n2\n\n\n9\n2022-01-01 03:00:00\n2\n0\n\n\n10\n2022-01-01 04:00:00\n2\n0\n\n\n11\n2022-01-01 05:00:00\n2\n1\n\n\n\n\n\n\n\n\nsource\n\n\nget_cutoff_indices_features_and_target\n\n get_cutoff_indices_features_and_target\n                                         (ts_data:pandas.core.frame.DataFr\n                                         ame, datetime_col:str,\n                                         n_features:int, n_targets:int=1,\n                                         step_size:int=1)\n\nFunction to get the indices for the cutoffs of a Time Series DataFrame. The Time Series DataFrame should be orderded by time.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nts_data\nDataFrame\n\nTime Series DataFrame\n\n\ndatetime_col\nstr\n\nName of the datetime column\n\n\nn_features\nint\n\nNumber of features to use for the prediction\n\n\nn_targets\nint\n1\nNumber of target values to predict\n\n\nstep_size\nint\n1\nStep size to use to slide the Time Series DataFrame\n\n\nReturns\ntyping.List[tuple]\n\n\n\n\n\n\n# build a time series dataframe with 10 hours of data in random order\nts_data = pd.DataFrame({\n    'pickup_hour': ['2022-01-01 01:00:00', '2022-01-01 00:00:00', '2022-01-01 03:00:00', '2022-01-01 04:00:00', '2022-01-01 02:00:00', '2022-01-01 05:00:00', '2022-01-01 09:00:00', '2022-01-01 06:00:00', '2022-01-01 07:00:00', '2022-01-01 08:00:00'],\n    'rides': [2, 3, 1, 1, 2, 1, 1, 2, 1, 1]\n})\nts_data\n\n\n\n\n\n\n\n\npickup_hour\nrides\n\n\n\n\n0\n2022-01-01 01:00:00\n2\n\n\n1\n2022-01-01 00:00:00\n3\n\n\n2\n2022-01-01 03:00:00\n1\n\n\n3\n2022-01-01 04:00:00\n1\n\n\n4\n2022-01-01 02:00:00\n2\n\n\n5\n2022-01-01 05:00:00\n1\n\n\n6\n2022-01-01 09:00:00\n1\n\n\n7\n2022-01-01 06:00:00\n2\n\n\n8\n2022-01-01 07:00:00\n1\n\n\n9\n2022-01-01 08:00:00\n1\n\n\n\n\n\n\n\n\n# the time series should be ordered by time, otherwise it will not work and throw a ValueError\nts_data.sort_values(by='pickup_hour', inplace=True, ignore_index=True)\ncutoff_idxs = get_cutoff_indices_features_and_target(ts_data, datetime_col='pickup_hour', n_features=3, n_targets=2, step_size=1)\ncutoff_idxs\n\n[(0, 3, 5), (1, 4, 6), (2, 5, 7), (3, 6, 8), (4, 7, 9)]\n\n\n\nassert cutoff_idxs == [(0, 3, 5), (1, 4, 6), (2, 5, 7), (3, 6, 8), (4, 7, 9)]\n\n\nsource\n\n\ntransform_ts_data_into_features_and_target\n\n transform_ts_data_into_features_and_target\n                                             (ts_data:pandas.core.frame.Da\n                                             taFrame, n_features:int,\n                                             datetime_col:str,\n                                             entity_col:str,\n                                             value_col:str,\n                                             n_targets:int=1,\n                                             step_size:int=1,\n                                             step_name:str=None,\n                                             concat_Xy:bool=False)\n\nSlices and transposes data from time-series format into a (features, target) format that we can use to train Supervised ML models.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nts_data\nDataFrame\n\nTime Series DataFrame\n\n\nn_features\nint\n\nNumber of features to use for the prediction\n\n\ndatetime_col\nstr\n\nName of the datetime column\n\n\nentity_col\nstr\n\nName of the entity column, e.g. location_id\n\n\nvalue_col\nstr\n\nName of the value column\n\n\nn_targets\nint\n1\nNumber of target values to predict\n\n\nstep_size\nint\n1\nStep size to use to slide the Time Series DataFrame\n\n\nstep_name\nstr\nNone\nName of the step column\n\n\nconcat_Xy\nbool\nFalse\nWhether to concat X and y on the same dataframe or not\n\n\nReturns\nDataFrame\n\n\n\n\n\n\n# build a time series dataframe with 10 hours of data in random order and a location id column with 1 and 2\nts_data = pd.DataFrame({\n    'pickup_hour': ['2022-01-01 01:00:00', '2022-01-01 00:00:00', '2022-01-01 03:00:00', '2022-01-01 04:00:00', '2022-01-01 02:00:00', '2022-01-01 05:00:00', '2022-01-01 09:00:00', '2022-01-01 06:00:00', '2022-01-01 07:00:00', '2022-01-01 08:00:00'],\n    'location_id': [1, 1, 1, 1, 1, 1, 2, 2, 2, 2],\n    'rides': [2, 3, 1, 1, 2, 1, 1, 2, 1, 1]\n})\nts_data\n\n\n\n\n\n\n\n\npickup_hour\nlocation_id\nrides\n\n\n\n\n0\n2022-01-01 01:00:00\n1\n2\n\n\n1\n2022-01-01 00:00:00\n1\n3\n\n\n2\n2022-01-01 03:00:00\n1\n1\n\n\n3\n2022-01-01 04:00:00\n1\n1\n\n\n4\n2022-01-01 02:00:00\n1\n2\n\n\n5\n2022-01-01 05:00:00\n1\n1\n\n\n6\n2022-01-01 09:00:00\n2\n1\n\n\n7\n2022-01-01 06:00:00\n2\n2\n\n\n8\n2022-01-01 07:00:00\n2\n1\n\n\n9\n2022-01-01 08:00:00\n2\n1\n\n\n\n\n\n\n\n\nts_data = add_missing_slots(ts_data, datetime_col='pickup_hour', entity_col='location_id', value_col='rides', freq='1H')\nts_data\n\n100%|██████████| 2/2 [00:00&lt;00:00, 708.92it/s]\n\n\n\n\n\n\n\n\n\npickup_hour\nlocation_id\nrides\n\n\n\n\n0\n2022-01-01 00:00:00\n1\n3\n\n\n1\n2022-01-01 01:00:00\n1\n2\n\n\n2\n2022-01-01 02:00:00\n1\n2\n\n\n3\n2022-01-01 03:00:00\n1\n1\n\n\n4\n2022-01-01 04:00:00\n1\n1\n\n\n5\n2022-01-01 05:00:00\n1\n1\n\n\n6\n2022-01-01 06:00:00\n1\n0\n\n\n7\n2022-01-01 07:00:00\n1\n0\n\n\n8\n2022-01-01 08:00:00\n1\n0\n\n\n9\n2022-01-01 09:00:00\n1\n0\n\n\n10\n2022-01-01 00:00:00\n2\n0\n\n\n11\n2022-01-01 01:00:00\n2\n0\n\n\n12\n2022-01-01 02:00:00\n2\n0\n\n\n13\n2022-01-01 03:00:00\n2\n0\n\n\n14\n2022-01-01 04:00:00\n2\n0\n\n\n15\n2022-01-01 05:00:00\n2\n0\n\n\n16\n2022-01-01 06:00:00\n2\n2\n\n\n17\n2022-01-01 07:00:00\n2\n1\n\n\n18\n2022-01-01 08:00:00\n2\n1\n\n\n19\n2022-01-01 09:00:00\n2\n1\n\n\n\n\n\n\n\n\nfeatures, targets = transform_ts_data_into_features_and_target(\n    ts_data=ts_data,\n    n_features=3,\n    datetime_col='pickup_hour',\n    entity_col='location_id',\n    value_col='rides',\n    n_targets=2,\n    step_size=1\n)\n\n100%|██████████| 2/2 [00:00&lt;00:00, 371.60it/s]\n\n\n\nfeatures\n\n\n\n\n\n\n\n\nrides_previous_3\nrides_previous_2\nrides_previous_1\npickup_hour\nlocation_id\n\n\n\n\n0\n3.0\n2.0\n2.0\n2022-01-01 03:00:00\n1\n\n\n1\n2.0\n2.0\n1.0\n2022-01-01 04:00:00\n1\n\n\n2\n2.0\n1.0\n1.0\n2022-01-01 05:00:00\n1\n\n\n3\n1.0\n1.0\n1.0\n2022-01-01 06:00:00\n1\n\n\n4\n1.0\n1.0\n0.0\n2022-01-01 07:00:00\n1\n\n\n5\n0.0\n0.0\n0.0\n2022-01-01 03:00:00\n2\n\n\n6\n0.0\n0.0\n0.0\n2022-01-01 04:00:00\n2\n\n\n7\n0.0\n0.0\n0.0\n2022-01-01 05:00:00\n2\n\n\n8\n0.0\n0.0\n0.0\n2022-01-01 06:00:00\n2\n\n\n9\n0.0\n0.0\n2.0\n2022-01-01 07:00:00\n2\n\n\n\n\n\n\n\n\ntargets\n\n\n\n\n\n\n\n\ntarget_rides_next_1\ntarget_rides_next_2\n\n\n\n\n0\n1.0\n1.0\n\n\n1\n1.0\n1.0\n\n\n2\n1.0\n0.0\n\n\n3\n0.0\n0.0\n\n\n4\n0.0\n0.0\n\n\n5\n0.0\n0.0\n\n\n6\n0.0\n0.0\n\n\n7\n0.0\n2.0\n\n\n8\n2.0\n1.0\n\n\n9\n1.0\n1.0\n\n\n\n\n\n\n\n\npd.concat([features, targets], axis=1)\n\n\n\n\n\n\n\n\nrides_previous_3\nrides_previous_2\nrides_previous_1\npickup_hour\nlocation_id\ntarget_rides_next_1\ntarget_rides_next_2\n\n\n\n\n0\n3.0\n2.0\n2.0\n2022-01-01 03:00:00\n1\n1.0\n1.0\n\n\n1\n2.0\n2.0\n1.0\n2022-01-01 04:00:00\n1\n1.0\n1.0\n\n\n2\n2.0\n1.0\n1.0\n2022-01-01 05:00:00\n1\n1.0\n0.0\n\n\n3\n1.0\n1.0\n1.0\n2022-01-01 06:00:00\n1\n0.0\n0.0\n\n\n4\n1.0\n1.0\n0.0\n2022-01-01 07:00:00\n1\n0.0\n0.0\n\n\n5\n0.0\n0.0\n0.0\n2022-01-01 03:00:00\n2\n0.0\n0.0\n\n\n6\n0.0\n0.0\n0.0\n2022-01-01 04:00:00\n2\n0.0\n0.0\n\n\n7\n0.0\n0.0\n0.0\n2022-01-01 05:00:00\n2\n0.0\n2.0\n\n\n8\n0.0\n0.0\n0.0\n2022-01-01 06:00:00\n2\n2.0\n1.0\n\n\n9\n0.0\n0.0\n2.0\n2022-01-01 07:00:00\n2\n1.0\n1.0\n\n\n\n\n\n\n\nThis dataset could be use to predict the rides for the next 2 hours, for each location_id, by using historical rides from the previous 3 hours."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ts2ml",
    "section": "",
    "text": "pip install ts2ml"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "ts2ml",
    "section": "",
    "text": "pip install ts2ml"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "ts2ml",
    "section": "How to use",
    "text": "How to use\n\nimport pandas as pd\nfrom ts2ml.core import add_missing_slots\nfrom ts2ml.core import transform_ts_data_into_features_and_target\n\n\ndf = pd.DataFrame({\n    'pickup_hour': ['2022-01-01 00:00:00', '2022-01-01 01:00:00', '2022-01-01 03:00:00', '2022-01-01 01:00:00', '2022-01-01 02:00:00', '2022-01-01 05:00:00'],\n    'pickup_location_id': [1, 1, 1, 2, 2, 2],\n    'rides': [2, 3, 1, 1, 2, 1]\n})\ndf\n\n\n\n\n\n\n\n\npickup_hour\npickup_location_id\nrides\n\n\n\n\n0\n2022-01-01 00:00:00\n1\n2\n\n\n1\n2022-01-01 01:00:00\n1\n3\n\n\n2\n2022-01-01 03:00:00\n1\n1\n\n\n3\n2022-01-01 01:00:00\n2\n1\n\n\n4\n2022-01-01 02:00:00\n2\n2\n\n\n5\n2022-01-01 05:00:00\n2\n1\n\n\n\n\n\n\n\nLet’s fill the missing slots with zeros\n\ndf = add_missing_slots(df, datetime_col='pickup_hour', entity_col='pickup_location_id', value_col='rides', freq='H')\ndf\n\n100%|██████████| 2/2 [00:00&lt;00:00, 907.86it/s]\n\n\n\n\n\n\n\n\n\npickup_hour\npickup_location_id\nrides\n\n\n\n\n0\n2022-01-01 00:00:00\n1\n2\n\n\n1\n2022-01-01 01:00:00\n1\n3\n\n\n2\n2022-01-01 02:00:00\n1\n0\n\n\n3\n2022-01-01 03:00:00\n1\n1\n\n\n4\n2022-01-01 04:00:00\n1\n0\n\n\n5\n2022-01-01 05:00:00\n1\n0\n\n\n6\n2022-01-01 00:00:00\n2\n0\n\n\n7\n2022-01-01 01:00:00\n2\n1\n\n\n8\n2022-01-01 02:00:00\n2\n2\n\n\n9\n2022-01-01 03:00:00\n2\n0\n\n\n10\n2022-01-01 04:00:00\n2\n0\n\n\n11\n2022-01-01 05:00:00\n2\n1\n\n\n\n\n\n\n\nNow, let’s build features and targets to predict the number of rides for the next hour for each location_id, by using the historical number of rides for the last 3 hours\n\nfeatures, targets = transform_ts_data_into_features_and_target(\n    df,\n    n_features=3,\n    datetime_col='pickup_hour', \n    entity_col='pickup_location_id', \n    value_col='rides',\n    n_targets=1,\n    step_size=1,\n    step_name='hour'\n)\n\n100%|██████████| 2/2 [00:00&lt;00:00, 597.86it/s]\n\n\n\nfeatures\n\n\n\n\n\n\n\n\nrides_previous_3_hour\nrides_previous_2_hour\nrides_previous_1_hour\npickup_hour\npickup_location_id\n\n\n\n\n0\n2.0\n3.0\n0.0\n2022-01-01 03:00:00\n1\n\n\n1\n3.0\n0.0\n1.0\n2022-01-01 04:00:00\n1\n\n\n2\n0.0\n1.0\n2.0\n2022-01-01 03:00:00\n2\n\n\n3\n1.0\n2.0\n0.0\n2022-01-01 04:00:00\n2\n\n\n\n\n\n\n\n\ntargets\n\n\n\n\n\n\n\n\ntarget_rides_next_hour\n\n\n\n\n0\n1.0\n\n\n1\n0.0\n\n\n2\n0.0\n\n\n3\n0.0\n\n\n\n\n\n\n\n\nXy_df = pd.concat([features, targets], axis=1)\nXy_df\n\n\n\n\n\n\n\n\nrides_previous_3_hour\nrides_previous_2_hour\nrides_previous_1_hour\npickup_hour\npickup_location_id\ntarget_rides_next_hour\n\n\n\n\n0\n2.0\n3.0\n0.0\n2022-01-01 03:00:00\n1\n1.0\n\n\n1\n3.0\n0.0\n1.0\n2022-01-01 04:00:00\n1\n0.0\n\n\n2\n0.0\n1.0\n2.0\n2022-01-01 03:00:00\n2\n0.0\n\n\n3\n1.0\n2.0\n0.0\n2022-01-01 04:00:00\n2\n0.0"
  }
]